name: Build and Push

on:
  push:
    branches:
      - development
      - prod

jobs:
  check_lambda_files:
    name: Check Lambda source code
    outputs:
      run_job: ${{ steps.check_lambda_files.outputs.run_job }}
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
        with:
          fetch-depth: 2

      - name: Check modified AWS Lambda Source Code
        id: check_lambda_files
        working-directory: identity-lambda
        run: |
          echo "=============== list modified files ==============="
          git diff --name-only HEAD^ HEAD

          echo "========== check paths of modified files =========="
          git diff --name-only HEAD^ HEAD > files.txt
          while IFS= read -r file
          do
            echo $file
            if [[ $file == identity-lambda/terraform/* || $file == .github/*  ]]; then
              echo "This modified file is not Lambda source code"
              echo "::set-output name=run_job::false"
              break
            else
              echo "::set-output name=run_job::true"
            fi
          done < files.txt

  codestyle:
    runs-on: ubuntu-latest
    needs: [ check_lambda_files ]
    if: needs.check_lambda_files.outputs.run_job == 'true'
    steps:
      - name: Set up Rust
        uses: hecrj/setup-rust-action@v1
        with:
          components: rustfmt
      - uses: actions/checkout@v2
      -
        working-directory: student-app
        run: cargo fmt --all -- --check
      -
        working-directory: student-lambda
        run: cargo fmt --all -- --check
  lint:
    runs-on: ubuntu-latest
    needs: [ check_lambda_files ]
    if: needs.check_lambda_files.outputs.run_job == 'true'
    steps:
      - name: Set up Rust
        uses: hecrj/setup-rust-action@v1
        with:
          components: clippy
      - uses: actions/checkout@v2
      - 
        working-directory: student-lambda
        run: cargo clippy --all-targets -- -D clippy::all
      -
        working-directory: identity-app
        run: cargo clippy --all-targets -- -D clippy::all
  compile:
    runs-on: ubuntu-latest
    needs: [ check_lambda_files ]
    if: needs.check_lambda_files.outputs.run_job == 'true'
    steps:
      - name: Set up Rust
        uses: hecrj/setup-rust-action@v1
      - uses: actions/checkout@v2
      - 
        working-directory: identity-lambda
        run: cargo check --all
      -
        working-directory: identity-app
        run: cargo check --all
  test:
    needs: [codestyle, lint, compile]
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:11
        env:
          POSTGRES_HOST_AUTH_METHOD: trust
          POSTGRES_DB: dev_hocvien
          POSTGRES_PASSWORD: 123456
          POSTGRES_USER: hocvien_dev
        ports:
          - 5432:5432
        # Set health checks to wait until postgres has started
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
    - name: Setup Rust
      uses: hecrj/setup-rust-action@v1
    - name: Checkout
      uses: actions/checkout@v2
      with:
        path: ./rust-service
    - name: Checkout shared-db-service
      uses: actions/checkout@v2
      with:
        # Repository name with owner. For example, actions/checkout
        # Default: ${{ github.repository }}
        repository: 'HocVienCongGiao/shared-db-service'
        path: ./db-service
        ref: development
        token: ${{ secrets.GH_OAUTH_TOKEN }}
    - name: Setup python
      working-directory: ./db-service
      env:
        DB_NAME: dev_hocvien
        DB_PASSWORD: 123456
        DB_USER: hocvien_dev
        DB_HOST: 0.0.0.0
      run: |
        echo "prepare"
        sudo apt-get update -y &&
        sudo apt-get install -y postgresql-server-dev-all gcc python3-dev musl-dev
        echo "install python"
        pip install -r ./requirements.txt --target ./lambda/terraform/module/python
        echo "copy python files in lamda folder"
        cp -R ./lambda/*.py ./lambda/terraform/module/python/
        echo "copy python files in shared_db_app folder"
        cp -R ./shared_db_app ./lambda/terraform/module/python/
        echo "copy python files in shared_db_app folder"
        cp -R ./migrations ./lambda/terraform/module/python/
        echo "all files in shared_db_app python folder"
        ls -l ./lambda/terraform/module/python/
        cd ./lambda/terraform/module/python/ && python -c 'from shared_db_app.migration import migrate; migrate()'
        echo "migrate successfully"
        psql -h 0.0.0.0 -U hocvien_dev -d dev_hocvien -p 5432 -c 'SELECT * FROM public.identity__group' -w
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ap-southeast-1
    - name: Test lambda
      working-directory: ./rust-service/student-lambda
      run: cargo test
    - name: Test components
      working-directory: ./rust-service/student-app
      run: cargo test
  # deploy on pushes to master branch
  # assumes aws credentials (AWS_ACCESS_KEY_ID, AWS_SECRET_ACCESS_KEY) are set in github secrets
  push_dev:
    if: github.ref == 'refs/heads/development'
    runs-on: ubuntu-latest
    env:
      TFE_TOKEN: ${{ secrets.TFE_TOKEN }}
    needs: [test]
    steps:
      - name: Install Musl-gcc
        run: |
          sudo apt update -y
          sudo apt install -y musl-tools
      - name: Set up Rust
        uses: hecrj/setup-rust-action@v1
        with:
          targets: x86_64-unknown-linux-musl

      - name: Checkout
        uses: actions/checkout@v2
        
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ap-southeast-1
      - name: Build and Push for Dev
        working-directory: identity-lambda
        # From line 135 to line 155 is for fixing open ssl issue. https://qiita.com/liubin/items/6c94f0b61f746c08b74c
        run: |
          sudo apt install -y pkg-config libssl-dev
          sudo ln -s /usr/include/x86_64-linux-gnu/asm /usr/include/x86_64-linux-musl/asm
          sudo ln -s /usr/include/asm-generic /usr/include/x86_64-linux-musl/asm-generic
          sudo ln -s /usr/include/linux /usr/include/x86_64-linux-musl/linux
          sudo mkdir /musl
          sudo apt-get install wget
          sudo wget https://github.com/openssl/openssl/archive/OpenSSL_1_1_1f.tar.gz
          sudo tar zxvf OpenSSL_1_1_1f.tar.gz
          cd openssl-OpenSSL_1_1_1f/
          echo nhut3
          sudo CC="musl-gcc -fPIE -pie" ./Configure no-shared no-async --prefix=/musl --openssldir=/musl/ssl linux-x86_64
          sudo apt-get install build-essential
          sudo make depend
          sudo make -j$(nproc)
          sudo make install
          export PKG_CONFIG_ALLOW_CROSS=1
          export OPENSSL_STATIC=true
          export OPENSSL_DIR=/musl
          cd /home/runner/work/identity-service/identity-service/student-lambda
          cargo clean
          cargo build --release --target x86_64-unknown-linux-musl
          cp ./target/x86_64-unknown-linux-musl/release/student ./bootstrap && zip student.zip bootstrap
          rm bootstrap
          aws s3 cp ./student.zip s3://891616054205-ap-southeast-1-aws-lambda/dev-sg-hocvienconggiao/${{ github.event.repository.name }}/latest/student.zip
      - name: App Deploy Terraform Config
        run: |
          chmod +x ./scripts/terraform-enterprise-push.sh
          ./scripts/terraform-enterprise-push.sh student-lambda/terraform HocVienCongGiao/dev-sg-lambda-services-hvcg-student-service
  push_prod:
    if: github.ref == 'refs/heads/prod'
    runs-on: ubuntu-latest
    env:
      TFE_TOKEN: ${{ secrets.TFE_TOKEN }}

    needs: [test]
    steps:
      - name: Install Musl-gcc
        run: |
          sudo apt update -y
          sudo apt install -y musl-tools

      - name: Set up Rust
        uses: hecrj/setup-rust-action@v1
        with:
          targets: x86_64-unknown-linux-musl

      - name: Checkout
        uses: actions/checkout@v2
        
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ap-southeast-1

      - name: Build and Push for Prod
        working-directory: identity-lambda
        # From line 197 to line 216 is for fixing open ssl issue
        run: |
          sudo apt install -y pkg-config libssl-dev
          sudo ln -s /usr/include/x86_64-linux-gnu/asm /usr/include/x86_64-linux-musl/asm
          sudo ln -s /usr/include/asm-generic /usr/include/x86_64-linux-musl/asm-generic
          sudo ln -s /usr/include/linux /usr/include/x86_64-linux-musl/linux
          sudo mkdir /musl
          sudo apt-get install wget
          sudo wget https://github.com/openssl/openssl/archive/OpenSSL_1_1_1f.tar.gz
          sudo tar zxvf OpenSSL_1_1_1f.tar.gz
          cd openssl-OpenSSL_1_1_1f/
          echo nhut3
          sudo CC="musl-gcc -fPIE -pie" ./Configure no-shared no-async --prefix=/musl --openssldir=/musl/ssl linux-x86_64
          sudo apt-get install build-essential
          sudo make depend
          sudo make -j$(nproc)
          sudo make install
          export PKG_CONFIG_ALLOW_CROSS=1
          export OPENSSL_STATIC=true
          export OPENSSL_DIR=/musl
          cd /home/runner/work/identity-service/identity-service/identity-lambda
          cargo clean
          cargo build --release --target x86_64-unknown-linux-musl
          cp ./target/x86_64-unknown-linux-musl/release/user ./bootstrap && zip user.zip bootstrap

          aws s3 cp ./user.zip s3://891616054205-ap-southeast-1-aws-lambda/prod-sg-hocvienconggiao/${{ github.event.repository.name }}/latest/user.zip

#         aws s3 cp target/lambda/release/notification.zip s3://891616054205-ap-southeast-1-aws-lambda/terraform-api/latest/notification.zip          
#         aws s3 rm --recursive s3://479284709538-us-west-2-aws-lambda/terraform-api/latest

